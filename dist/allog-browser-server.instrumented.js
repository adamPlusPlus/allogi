var p=Object.defineProperty;var d=(s,e,t)=>e in s?p(s,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):s[e]=t;var r=(s,e,t)=>d(s,typeof e!="symbol"?e+"":e,t);function a(){try{if(globalThis.__DEV__===!0)return!0}catch{}try{let s=globalThis?.process?.env?.NODE_ENV;return s==="development"||s==="dev"}catch{return!1}}function m(){try{let s=new Error().stack;if(!s)return{};let e=s.split(`
`);for(let t=3;t<e.length;t++){let i=e[t].match(/at\s+(?:(\w+)\s+\()?([^:]+):(\d+):(\d+)\)?/);if(i){let[,o,l,g]=i;if(l.includes("/lib/allog/")||l.includes("allog-"))continue;return{functionName:o||void 0,file:l.trim(),line:parseInt(g,10)}}}}catch{}return{}}var f=class{constructor(){r(this,"logBuffer",[]);r(this,"logToggles",new Map);r(this,"bufferSize",500);r(this,"isInitialized",!1);r(this,"serverUrl","http://localhost:3001");r(this,"serverEnabled",a());r(this,"serverMaxRetryAttempts",3);r(this,"serverRetryDelayMs",1e3);r(this,"debounceDelayMs",100);r(this,"pendingLogs",[]);r(this,"isSending",!1);r(this,"retentionMaxAgeHours",0);r(this,"retentionMaxCount",0);r(this,"cleanupRetryAttempts",0);r(this,"fileInfoSamplingRate",1);this.initialize()}initialize(){this.isInitialized||(this.enable("allog-engine","info"),this.enable("allog-system","info"),this.isInitialized=!0)}async sendLogsToServer(e){if(!this.serverEnabled||e.length===0||typeof fetch!="function")return;let t=0,n=null;for(;t<=this.serverMaxRetryAttempts;)try{let i=await fetch(`${this.serverUrl}/api/logs`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({logs:e.map(o=>({...o,time:o.time instanceof Date?o.time.toISOString():String(o.time)}))})});if(!i.ok)throw new Error(`Failed to send logs to server: ${i.status}`);return}catch(i){if(n=i,t+=1,t>this.serverMaxRetryAttempts)break;await new Promise(o=>setTimeout(o,this.serverRetryDelayMs))}console.warn("Failed to send logs to server after retries:",n)}async processPendingLogs(){if(this.isSending||this.pendingLogs.length===0)return;this.isSending=!0;let e=this.pendingLogs.slice();try{await this.sendLogsToServer(e),this.pendingLogs.splice(0,e.length)}catch(t){console.warn("[Allog] Failed to send logs to server, preserving pending logs:",t)}finally{this.isSending=!1,this.pendingLogs.length>0&&setTimeout(()=>this.processPendingLogs(),this.debounceDelayMs)}}log(e,t,n="info",i){let o=this.logToggles.get(e);if(!o?.enabled)return;let l={debug:0,info:1,warn:2,error:3};if(l[n]<l[o.level])return;let g=Math.random()<this.fileInfoSamplingRate?m():{},h={id:e,message:t,time:new Date,level:n,data:i,stack:new Error().stack,...g};this.routeToAllog(h),a()&&console[n==="error"?"error":n==="warn"?"warn":"log"](`[${e}] ${t}`,i||"")}routeLogEntry(e){this.routeToAllog(e)}routeToAllog(e){this.logBuffer.push(e),this.logBuffer.length>this.bufferSize&&this.logBuffer.shift(),this.pendingLogs.push(e),setTimeout(()=>this.processPendingLogs(),this.debounceDelayMs)}enable(e,t="info"){this.logToggles.set(e,{enabled:!0,level:t,lastToggled:new Date}),this.log("allog-engine",`Enabled logging for ${e} at ${t} level`,"info")}disable(e){this.logToggles.set(e,{enabled:!1,level:"info",lastToggled:new Date}),this.log("allog-engine",`Disabled logging for ${e}`,"info")}isEnabled(e){return this.logToggles.get(e)?.enabled||!1}toggle(e){this.logToggles.get(e)?.enabled?this.disable(e):this.enable(e)}getLogs(){let e=[...this.logBuffer];return a()&&this.log("allogEngine","Buffer operation: Retrieved all logs","debug",{totalLogs:e.length,bufferSize:this.logBuffer.length,maxBufferSize:this.bufferSize}),e}getLogsByScript(e){let t=this.logBuffer.filter(n=>n.id===e);return a()&&this.log("allogEngine","Buffer operation: Retrieved logs by script","debug",{scriptId:e,totalLogs:t.length,bufferSize:this.logBuffer.length}),t}getLogsByLevel(e){let t=this.logBuffer.filter(n=>n.level===e);return a()&&this.log("allogEngine","Buffer operation: Retrieved logs by level","debug",{level:e,totalLogs:t.length,bufferSize:this.logBuffer.length}),t}getKnownScripts(){let e=Array.from(this.logToggles.keys());return a()&&this.log("allogEngine","Buffer operation: Retrieved known scripts","debug",{scriptCount:e.length,scripts:e}),e}getToggleStatus(){let e={};return this.logToggles.forEach((t,n)=>{e[n]={...t}}),a()&&this.log("allogEngine","Buffer operation: Retrieved toggle status","debug",{scriptCount:Object.keys(e).length,enabledScripts:Object.keys(e).filter(t=>e[t].enabled)}),e}clear(){let e=this.logBuffer.length;this.logBuffer=[],this.pendingLogs=[],a()&&this.log("allogEngine","Buffer operation: Cleared all logs","info",{previousCount:e,currentCount:0}),this.cleanupRetryAttempts=0}setBufferSize(e){let t=this.bufferSize;if(this.bufferSize=e,this.logBuffer.length>e){let n=this.logBuffer.length-e;this.logBuffer=this.logBuffer.slice(-e),a()&&this.log("allogEngine","Buffer operation: Trimmed buffer due to size change","debug",{oldSize:t,newSize:e,removedCount:n,currentCount:this.logBuffer.length})}a()&&this.log("allogEngine","Configuration change: Buffer size updated","info",{oldSize:t,newSize:e})}getBufferSize(){return this.bufferSize}getLogCount(){return this.logBuffer.length}configureServer(e,t=!0){let n=this.serverUrl,i=this.serverEnabled;this.serverUrl=e,this.serverEnabled=t,a()&&this.log("allog-engine","Configuration change: Server settings updated","info",{oldUrl:n,newUrl:e,oldEnabled:i,newEnabled:t})}configureRetryBehavior(e,t,n){this.serverMaxRetryAttempts=Math.max(0,e|0),this.serverRetryDelayMs=Math.max(0,t|0),typeof n=="number"&&(this.debounceDelayMs=Math.max(0,n|0))}getServerConfig(){return{url:this.serverUrl,enabled:this.serverEnabled,maxRetryAttempts:this.serverMaxRetryAttempts,retryDelayMs:this.serverRetryDelayMs}}async flushPendingLogs(){for(;(this.pendingLogs.length>0||this.isSending)&&(await this.processPendingLogs(),!(this.pendingLogs.length===0&&!this.isSending));)await new Promise(e=>setTimeout(e,50))}getPerformanceMetrics(){let e=typeof performance<"u"&&typeof performance.now=="function"?()=>performance.now():()=>Date.now(),t=e(),i=typeof process<"u"&&typeof process.memoryUsage=="function"?process.memoryUsage().heapUsed:0,o=e()-t,l=this.bufferSize>0?this.logBuffer.length/this.bufferSize:0;return{loggingLatency:o,bufferUtilization:l,memoryUsage:i,throughput:this.logBuffer.length,timestamp:new Date}}cleanup(){let e=this.logBuffer.length;if(this.retentionMaxAgeHours>0){let t=Date.now()-this.retentionMaxAgeHours*3600*1e3;this.logBuffer=this.logBuffer.filter(n=>{let i=n.time instanceof Date?n.time.getTime():Date.parse(String(n.time));return isNaN(i)?!0:i>=t})}this.retentionMaxCount>0&&this.logBuffer.length>this.retentionMaxCount&&(this.logBuffer=this.logBuffer.slice(-this.retentionMaxCount)),this.cleanupRetryAttempts+=1,a()&&this.log("allogEngine","Cleanup executed","debug",{before:e,after:this.logBuffer.length})}getCleanupStatus(){return{pendingLogsCount:this.pendingLogs.length,cacheSize:this.logBuffer.length,retryAttempts:this.cleanupRetryAttempts,isSending:this.isSending}}configureRetention(e,t){this.retentionMaxAgeHours=Math.max(0,e|0),this.retentionMaxCount=Math.max(0,t|0)}getRetentionSettings(){return{maxAgeHours:this.retentionMaxAgeHours,maxCount:this.retentionMaxCount}}enableAll(e="info"){for(let t of this.logToggles.keys())this.enable(t,e)}disableAll(){for(let e of this.logToggles.keys())this.disable(e)}setFileInfoSamplingRate(e){this.fileInfoSamplingRate=Math.max(0,Math.min(1,e))}getAllModules(){return this.getKnownScripts()}getEnabledModules(){return Array.from(this.logToggles.entries()).filter(([,e])=>e.enabled).map(([e])=>e)}},y=new f,c=y;var u=class{constructor(e={}){r(this,"config");r(this,"clients",new Map);r(this,"server",null);r(this,"isRunning",!1);r(this,"logBuffer",[]);r(this,"maxBufferSize",1e3);this.config={port:8080,host:"localhost",enableCORS:!0,maxConnections:10,...e}}async start(){if(this.isRunning){console.warn("AllogBrowserServer is already running");return}try{await this.startHttpServer(),this.isRunning=!0,console.log(`AllogBrowserServer started at http://${this.config.host}:${this.config.port}`),this.startLogListener()}catch(e){throw console.error("Failed to start AllogBrowserServer:",e),e}}async startHttpServer(){console.log("Starting HTTP server for browser log viewing...")}async stop(){if(this.isRunning)try{this.clients.forEach(e=>{e.isAlive=!1}),this.clients.clear(),this.server,this.isRunning=!1,console.log("AllogBrowserServer stopped")}catch(e){console.error("Error stopping AllogBrowserServer:",e)}}startLogListener(){setInterval(()=>{let e=c.getLogs(),t=e.filter(n=>!this.logBuffer.some(i=>i.id===n.id));t.length>0&&(this.broadcastLogs(t),this.logBuffer=e.slice(-this.maxBufferSize))},100)}broadcastLogs(e){let t={type:"logs",data:e,timestamp:Date.now()};this.clients.forEach((n,i)=>{if(n.isAlive)try{n.send(JSON.stringify(t))}catch(o){console.warn(`Failed to send to client ${i}:`,o),n.isAlive=!1}}),this.cleanupDeadConnections()}cleanupDeadConnections(){this.clients.forEach((e,t)=>{e.isAlive||this.clients.delete(t)})}getStatus(){return{isRunning:this.isRunning,clientCount:this.clients.size,config:this.config}}getBrowserUrl(){return`http://${this.config.host}:${this.config.port}`}},b=new u;var R=b;export{u as AllogBrowserServer,R as default};
