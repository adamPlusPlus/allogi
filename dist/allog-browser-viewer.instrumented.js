var p=Object.defineProperty;var d=(o,e,t)=>e in o?p(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t;var i=(o,e,t)=>d(o,typeof e!="symbol"?e+"":e,t);function l(){try{if(globalThis.__DEV__===!0)return!0}catch{}try{let o=globalThis?.process?.env?.NODE_ENV;return o==="development"||o==="dev"}catch{return!1}}function m(){try{let o=new Error().stack;if(!o)return{};let e=o.split(`
`);for(let t=3;t<e.length;t++){let r=e[t].match(/at\s+(?:(\w+)\s+\()?([^:]+):(\d+):(\d+)\)?/);if(r){let[,s,a,g]=r;if(a.includes("/lib/allog/")||a.includes("allog-"))continue;return{functionName:s||void 0,file:a.trim(),line:parseInt(g,10)}}}}catch{}return{}}var f=class{constructor(){i(this,"logBuffer",[]);i(this,"logToggles",new Map);i(this,"bufferSize",500);i(this,"isInitialized",!1);i(this,"serverUrl","http://localhost:3001");i(this,"serverEnabled",l());i(this,"serverMaxRetryAttempts",3);i(this,"serverRetryDelayMs",1e3);i(this,"debounceDelayMs",100);i(this,"pendingLogs",[]);i(this,"isSending",!1);i(this,"retentionMaxAgeHours",0);i(this,"retentionMaxCount",0);i(this,"cleanupRetryAttempts",0);i(this,"fileInfoSamplingRate",1);this.initialize()}initialize(){this.isInitialized||(this.enable("allog-engine","info"),this.enable("allog-system","info"),this.isInitialized=!0)}async sendLogsToServer(e){if(!this.serverEnabled||e.length===0||typeof fetch!="function")return;let t=0,n=null;for(;t<=this.serverMaxRetryAttempts;)try{let r=await fetch(`${this.serverUrl}/api/logs`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({logs:e.map(s=>({...s,time:s.time instanceof Date?s.time.toISOString():String(s.time)}))})});if(!r.ok)throw new Error(`Failed to send logs to server: ${r.status}`);return}catch(r){if(n=r,t+=1,t>this.serverMaxRetryAttempts)break;await new Promise(s=>setTimeout(s,this.serverRetryDelayMs))}console.warn("Failed to send logs to server after retries:",n)}async processPendingLogs(){if(this.isSending||this.pendingLogs.length===0)return;this.isSending=!0;let e=this.pendingLogs.slice();try{await this.sendLogsToServer(e),this.pendingLogs.splice(0,e.length)}catch(t){console.warn("[Allog] Failed to send logs to server, preserving pending logs:",t)}finally{this.isSending=!1,this.pendingLogs.length>0&&setTimeout(()=>this.processPendingLogs(),this.debounceDelayMs)}}log(e,t,n="info",r){let s=this.logToggles.get(e);if(!s?.enabled)return;let a={debug:0,info:1,warn:2,error:3};if(a[n]<a[s.level])return;let g=Math.random()<this.fileInfoSamplingRate?m():{},c={id:e,message:t,time:new Date,level:n,data:r,stack:new Error().stack,...g};this.routeToAllog(c),l()&&console[n==="error"?"error":n==="warn"?"warn":"log"](`[${e}] ${t}`,r||"")}routeLogEntry(e){this.routeToAllog(e)}routeToAllog(e){this.logBuffer.push(e),this.logBuffer.length>this.bufferSize&&this.logBuffer.shift(),this.pendingLogs.push(e),setTimeout(()=>this.processPendingLogs(),this.debounceDelayMs)}enable(e,t="info"){this.logToggles.set(e,{enabled:!0,level:t,lastToggled:new Date}),this.log("allog-engine",`Enabled logging for ${e} at ${t} level`,"info")}disable(e){this.logToggles.set(e,{enabled:!1,level:"info",lastToggled:new Date}),this.log("allog-engine",`Disabled logging for ${e}`,"info")}isEnabled(e){return this.logToggles.get(e)?.enabled||!1}toggle(e){this.logToggles.get(e)?.enabled?this.disable(e):this.enable(e)}getLogs(){let e=[...this.logBuffer];return l()&&this.log("allogEngine","Buffer operation: Retrieved all logs","debug",{totalLogs:e.length,bufferSize:this.logBuffer.length,maxBufferSize:this.bufferSize}),e}getLogsByScript(e){let t=this.logBuffer.filter(n=>n.id===e);return l()&&this.log("allogEngine","Buffer operation: Retrieved logs by script","debug",{scriptId:e,totalLogs:t.length,bufferSize:this.logBuffer.length}),t}getLogsByLevel(e){let t=this.logBuffer.filter(n=>n.level===e);return l()&&this.log("allogEngine","Buffer operation: Retrieved logs by level","debug",{level:e,totalLogs:t.length,bufferSize:this.logBuffer.length}),t}getKnownScripts(){let e=Array.from(this.logToggles.keys());return l()&&this.log("allogEngine","Buffer operation: Retrieved known scripts","debug",{scriptCount:e.length,scripts:e}),e}getToggleStatus(){let e={};return this.logToggles.forEach((t,n)=>{e[n]={...t}}),l()&&this.log("allogEngine","Buffer operation: Retrieved toggle status","debug",{scriptCount:Object.keys(e).length,enabledScripts:Object.keys(e).filter(t=>e[t].enabled)}),e}clear(){let e=this.logBuffer.length;this.logBuffer=[],this.pendingLogs=[],l()&&this.log("allogEngine","Buffer operation: Cleared all logs","info",{previousCount:e,currentCount:0}),this.cleanupRetryAttempts=0}setBufferSize(e){let t=this.bufferSize;if(this.bufferSize=e,this.logBuffer.length>e){let n=this.logBuffer.length-e;this.logBuffer=this.logBuffer.slice(-e),l()&&this.log("allogEngine","Buffer operation: Trimmed buffer due to size change","debug",{oldSize:t,newSize:e,removedCount:n,currentCount:this.logBuffer.length})}l()&&this.log("allogEngine","Configuration change: Buffer size updated","info",{oldSize:t,newSize:e})}getBufferSize(){return this.bufferSize}getLogCount(){return this.logBuffer.length}configureServer(e,t=!0){let n=this.serverUrl,r=this.serverEnabled;this.serverUrl=e,this.serverEnabled=t,l()&&this.log("allog-engine","Configuration change: Server settings updated","info",{oldUrl:n,newUrl:e,oldEnabled:r,newEnabled:t})}configureRetryBehavior(e,t,n){this.serverMaxRetryAttempts=Math.max(0,e|0),this.serverRetryDelayMs=Math.max(0,t|0),typeof n=="number"&&(this.debounceDelayMs=Math.max(0,n|0))}getServerConfig(){return{url:this.serverUrl,enabled:this.serverEnabled,maxRetryAttempts:this.serverMaxRetryAttempts,retryDelayMs:this.serverRetryDelayMs}}async flushPendingLogs(){for(;(this.pendingLogs.length>0||this.isSending)&&(await this.processPendingLogs(),!(this.pendingLogs.length===0&&!this.isSending));)await new Promise(e=>setTimeout(e,50))}getPerformanceMetrics(){let e=typeof performance<"u"&&typeof performance.now=="function"?()=>performance.now():()=>Date.now(),t=e(),r=typeof process<"u"&&typeof process.memoryUsage=="function"?process.memoryUsage().heapUsed:0,s=e()-t,a=this.bufferSize>0?this.logBuffer.length/this.bufferSize:0;return{loggingLatency:s,bufferUtilization:a,memoryUsage:r,throughput:this.logBuffer.length,timestamp:new Date}}cleanup(){let e=this.logBuffer.length;if(this.retentionMaxAgeHours>0){let t=Date.now()-this.retentionMaxAgeHours*3600*1e3;this.logBuffer=this.logBuffer.filter(n=>{let r=n.time instanceof Date?n.time.getTime():Date.parse(String(n.time));return isNaN(r)?!0:r>=t})}this.retentionMaxCount>0&&this.logBuffer.length>this.retentionMaxCount&&(this.logBuffer=this.logBuffer.slice(-this.retentionMaxCount)),this.cleanupRetryAttempts+=1,l()&&this.log("allogEngine","Cleanup executed","debug",{before:e,after:this.logBuffer.length})}getCleanupStatus(){return{pendingLogsCount:this.pendingLogs.length,cacheSize:this.logBuffer.length,retryAttempts:this.cleanupRetryAttempts,isSending:this.isSending}}configureRetention(e,t){this.retentionMaxAgeHours=Math.max(0,e|0),this.retentionMaxCount=Math.max(0,t|0)}getRetentionSettings(){return{maxAgeHours:this.retentionMaxAgeHours,maxCount:this.retentionMaxCount}}enableAll(e="info"){for(let t of this.logToggles.keys())this.enable(t,e)}disableAll(){for(let e of this.logToggles.keys())this.disable(e)}setFileInfoSamplingRate(e){this.fileInfoSamplingRate=Math.max(0,Math.min(1,e))}getAllModules(){return this.getKnownScripts()}getEnabledModules(){return Array.from(this.logToggles.entries()).filter(([,e])=>e.enabled).map(([e])=>e)}},y=new f,h=y;var u=class{constructor(e={}){i(this,"config");i(this,"isRunning",!1);i(this,"lastLogCount",0);i(this,"intervalId",null);this.config={port:3001,host:"localhost",autoOpen:!0,refreshInterval:500,...e}}async start(){if(this.isRunning){console.warn("AllogBrowserViewer is already running");return}try{await this.startServer(),this.isRunning=!0;let e=this.getViewerUrl();console.log(`AllogBrowserViewer started at ${e}`),this.config.autoOpen&&this.openBrowser(e),this.startLogPolling()}catch(e){throw console.error("Failed to start AllogBrowserViewer:",e),e}}async startServer(){console.log("Starting HTTP server for browser log viewing...")}startLogPolling(){this.intervalId=setInterval(()=>{let e=h.getLogs();e.length!==this.lastLogCount&&(this.lastLogCount=e.length,console.log(`Logs updated: ${e.length} total logs`))},this.config.refreshInterval)}async stop(){this.isRunning&&(this.intervalId&&(clearInterval(this.intervalId),this.intervalId=null),this.isRunning=!1,console.log("AllogBrowserViewer stopped"))}openBrowser(e){typeof window<"u"?window.open(e,"_blank"):console.log(`Open your browser to: ${e}`)}getViewerUrl(){return`http://${this.config.host}:${this.config.port}`}getScreenshotViewerHtml(e){let t=e.overlay||{viewport:{width:0,height:0},elements:[]},n=t.elements.map(r=>`<div class="box" title="${r.label||r.id}" style="left:${r.rect.x}px;top:${r.rect.y}px;width:${r.rect.width}px;height:${r.rect.height}px"></div>`).join("");return`<!doctype html>
<html><head><meta charset="utf-8"/><title>Allog Screenshot</title>
<style>
  body{margin:0;background:#111;color:#eee;font-family:system-ui, sans-serif}
  .wrap{position:relative;display:inline-block}
  img{display:block;max-width:100vw;max-height:100vh}
  .box{position:absolute;border:2px solid #00e5ff;box-shadow:0 0 6px rgba(0,229,255,.8);}
  .legend{position:fixed;left:10px;bottom:10px;background:rgba(0,0,0,.6);padding:8px 12px;border-radius:8px}
  .legend h1{font-size:14px;margin:0 0 6px}
  .legend li{font-size:12px}
  .legend small{color:#aaa}
  
</style></head>
<body>
  <div class="wrap">
    <img src="${e.imageUrl}"/>
    ${n}
  </div>
  <div class="legend">
    <h1>Overlay</h1>
    <ul>${t.elements.map(r=>`<li>${r.label||r.id} <small>(${r.rect.x},${r.rect.y},${r.rect.width}x${r.rect.height})</small></li>`).join("")}</ul>
  </div>
</body></html>`}getStatus(){return{isRunning:this.isRunning,config:this.config,url:this.getViewerUrl()}}},b=new u;var R=b;export{u as AllogBrowserViewer,R as default};
