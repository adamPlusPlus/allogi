var s={network:{ports:{viewer:3001,server:3002},urls:{defaultServer:"http://localhost:3002",alternativeServer:"http://localhost:8080",productionServer:"https://api.example.com/allog"},connection:{timeout:5e3,retries:3,minTimeout:1e3,maxTimeout:3e4,retryDelay:1e3}},refresh:{intervals:{default:3e4,minimum:1e3,options:[1e3,2e3,5e3,1e4,3e4]},autoRefresh:{enabled:!1,minInterval:3e4}},logging:{levels:{valid:["info","warn","error","debug","test"],default:"info",colors:{info:"#007AFF",warn:"#FF9500",error:"#FF3B30",debug:"#888888",test:"#6c757d"}},internal:{maxLogs:1e3,enableConsole:!0,defaultLevel:"info"}},ui:{colors:{status:{connected:"#28a745",error:"#dc3545",neutral:"#6c757d",warning:"#FF9500"},script:["#4ec9b0","#569cd6","#dcdcaa","#ce9178","#c586c0","#6a9955","#d7ba7d","#9cdcfe","#f44747","#ff7f50"]},layout:{imagePreview:{maxWidth:"100%",maxHeight:300,borderRadius:4},notification:{autoHideDelay:3e3,fadeOutDuration:300}}},buffers:{logs:{default:500,maximum:1e4},stats:{enabledModules:0,totalModules:0}},instrumentation:{levels:{none:"none",basic:"basic",detailed:"detailed",comprehensive:"comprehensive"},defaults:{enabled:!0,level:"detailed"}},defaults:{fallback:{sourceId:"unknown",scriptId:"unknown",sourceType:"unknown",sourceVersion:"1.0.0"},messages:{loading:"Loading logs...",noLogs:"No logs available",noMatching:"No logs match your current filters",disconnected:"Not connected to server",connectionFailed:"Connection failed"}},export:{formats:["csv","json"],filenamePrefixes:{logs:"allog-logs",stats:"allog-stats",config:"allog-config"}}};var i=class{constructor(){this.config=s}get viewerPort(){return this.config.network.ports.viewer}get serverPort(){return this.config.network.ports.server}get defaultServerUrl(){return this.config.network.urls.defaultServer}get alternativeServerUrl(){return this.config.network.urls.alternativeServer}get productionServerUrl(){return this.config.network.urls.productionServer}get connectionTimeout(){return this.config.network.connection.timeout}get connectionRetries(){return this.config.network.connection.retries}get minTimeout(){return this.config.network.connection.minTimeout}get maxTimeout(){return this.config.network.connection.maxTimeout}get defaultRefreshInterval(){return this.config.refresh.intervals.default}get minRefreshInterval(){return this.config.refresh.intervals.minimum}get refreshOptions(){return this.config.refresh.intervals.options}get autoRefreshEnabled(){return this.config.refresh.autoRefresh.enabled}get minAutoRefreshInterval(){return this.config.refresh.autoRefresh.minInterval}get validLogLevels(){return this.config.logging.levels.valid}get defaultLogLevel(){return this.config.logging.levels.default}get logLevelColors(){return this.config.logging.levels.colors}get maxInternalLogs(){return this.config.logging.internal.maxLogs}get enableConsoleLogging(){return this.config.logging.internal.enableConsole}get defaultInternalLogLevel(){return this.config.logging.internal.defaultLevel}get statusColors(){return this.config.ui.colors.status}get scriptColors(){return this.config.ui.colors.script}get imagePreviewConfig(){return this.config.ui.layout.imagePreview}get notificationConfig(){return this.config.ui.layout.notification}get defaultLogBuffer(){return this.config.buffers.logs.default}get maxLogBuffer(){return this.config.buffers.logs.maximum}get instrumentationLevels(){return this.config.instrumentation.levels}get defaultInstrumentationEnabled(){return this.config.instrumentation.defaults.enabled}get defaultInstrumentationLevel(){return this.config.instrumentation.defaults.level}get fallbackValues(){return this.config.defaults.fallback}get defaultMessages(){return this.config.defaults.messages}get exportFormats(){return this.config.export.formats}get exportFilenamePrefixes(){return this.config.export.filenamePrefixes}isValidLogLevel(e){return this.validLogLevels.includes(e)}getLogLevelColor(e){return this.logLevelColors[e]||this.statusColors.neutral}getScriptColor(e){let t=this.scriptColors,n=(e||this.fallbackValues.scriptId).split("").reduce((r,l)=>(r=(r<<5)-r+l.charCodeAt(0),r&r),0);return t[Math.abs(n)%t.length]}getStatusColor(e){return this.statusColors[e]||this.statusColors.neutral}getConnectionConfig(){return{baseUrl:this.defaultServerUrl,timeout:this.connectionTimeout,retries:this.connectionRetries}}getWebSocketUrl(e){let t=window.location.protocol==="https:"?"wss":"ws",o=window.location.hostname,n=e||window.location.port,r=n===this.viewerPort.toString()?this.serverPort.toString():n||this.serverPort.toString();return`${t}://${o}:${r}`}getApiServerUrl(){let e=window.location.hostname,o=window.location.port===this.serverPort.toString()?this.viewerPort.toString():this.serverPort.toString();return`http://${e}:${o}`}formatMessage(e,t={}){return(this.defaultMessages[e]||e).replace(/\{(\w+)\}/g,(n,r)=>t[r]||n)}getServerUrl(){return window.ALLOG_INTERMEDIARY_URL||this.defaultServerUrl}getInitialLogStats(){return{totalLogs:0,bufferSize:this.defaultLogBuffer,enabledModules:this.config.buffers.stats.enabledModules,totalModules:this.config.buffers.stats.totalModules,logLevels:this.validLogLevels.reduce((e,t)=>(e[t]=0,e),{}),lastUpdate:new Date().toISOString()}}getInitialConnectionStatus(){return{isConnected:!1,retryCount:0}}getInitialMonitoringStats(){return{totalModules:0,totalScripts:0,totalVariables:0,totalStates:0,totalFunctions:0,totalProperties:0,totalEvents:0,lastUpdate:new Date().toISOString()}}},g=new i,d=g;export{d as default,g as viewerConfig};
