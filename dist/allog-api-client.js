var o=class{constructor(t){this.serverUrl=t}async requestText(t,r){let e=await fetch(`${this.serverUrl}${t}`,r);if(!e.ok)throw new Error(`HTTP ${e.status}`);return e.text()}parseJsonFromText(t){try{let r=t.indexOf("{");return r===-1?{}:JSON.parse(t.slice(r))}catch{return{}}}async getLogs(){let t=await this.requestText("/api/logs");return(this.parseJsonFromText(t).logs||[]).map(s=>({...s,timestamp:s.timestamp||s.time||s.serverReceivedAt}))}async clearLogs(){await fetch(`${this.serverUrl}/api/logs`,{method:"DELETE"})}async exportLogs(){let t=await fetch(`${this.serverUrl}/api/export?format=csv`);if(!t.ok)throw new Error(`HTTP ${t.status}`);return t.text()}async getStats(){let t=await this.getLogs();return{totalLogs:t.length,byLevel:t.reduce((r,e)=>(r[e.level]=(r[e.level]||0)+1,r),{}),byScript:t.reduce((r,e)=>{let s=e.scriptId||"unknown";return r[s]=(r[s]||0)+1,r},{})}}async healthCheck(){try{return(await fetch(`${this.serverUrl}/api/status`)).ok}catch{return!1}}async sendRawLog(t,r="info"){let e=await fetch(`${this.serverUrl}/api/logs/raw`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});if(!e.ok)throw new Error(`HTTP ${e.status}`);return e.json()}async sendTextLog(t,r="info"){let e=await fetch(`${this.serverUrl}/api/logs/text`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:t,level:r})});if(!e.ok)throw new Error(`HTTP ${e.status}`);return e.json()}async sendTextLogGet(t,r="info",e){let s=new URLSearchParams({text:t,level:r});e&&s.append("source",e);let n=await fetch(`${this.serverUrl}/api/logs/text?${s}`);if(!n.ok)throw new Error(`HTTP ${n.status}`);return n.json()}async getRecursiveLogs(){return this.getLogs()}async getRecursiveLogsStats(){let t=await this.getStats();return{totalRecursiveLogs:t.totalLogs,byScript:t.byScript,byLevel:t.byLevel}}async getLevelColor(t){switch(t){case"error":return"#ff4444";case"warn":return"#ffaa00";case"info":return"#44aa44";case"debug":return"#888888";default:return"#cccccc"}}async getScriptColor(t){let r=["#4ec9b0","#569cd6","#dcdcaa","#ce9178","#c586c0","#6a9955","#d7ba7d","#9cdcfe","#f44747","#ff7f50"],e=(t||"").split("").reduce((s,n)=>(s=(s<<5)-s+n.charCodeAt(0),s&s),0);return r[Math.abs(e)%r.length]}async formatTime(t){try{return new Date(t).toLocaleTimeString()}catch{return String(t||"")}}};function a(i){return new o(i)}var g=a;export{a as createAllogApiClient,g as default};
