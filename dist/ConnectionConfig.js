import{useState as g,useEffect as U}from"react";import{createAllogApiClient as C}from"@formwise/allog-api-client";var x={network:{ports:{viewer:3001,server:3002},urls:{defaultServer:"http://localhost:3002",alternativeServer:"http://localhost:8080",productionServer:"https://api.example.com/allog"},connection:{timeout:5e3,retries:3,minTimeout:1e3,maxTimeout:3e4,retryDelay:1e3}},refresh:{intervals:{default:3e4,minimum:1e3,options:[1e3,2e3,5e3,1e4,3e4]},autoRefresh:{enabled:!1,minInterval:3e4}},logging:{levels:{valid:["info","warn","error","debug","test"],default:"info",colors:{info:"#007AFF",warn:"#FF9500",error:"#FF3B30",debug:"#888888",test:"#6c757d"}},internal:{maxLogs:1e3,enableConsole:!0,defaultLevel:"info"}},ui:{colors:{status:{connected:"#28a745",error:"#dc3545",neutral:"#6c757d",warning:"#FF9500"},script:["#4ec9b0","#569cd6","#dcdcaa","#ce9178","#c586c0","#6a9955","#d7ba7d","#9cdcfe","#f44747","#ff7f50"]},layout:{imagePreview:{maxWidth:"100%",maxHeight:300,borderRadius:4},notification:{autoHideDelay:3e3,fadeOutDuration:300}}},buffers:{logs:{default:500,maximum:1e4},stats:{enabledModules:0,totalModules:0}},instrumentation:{levels:{none:"none",basic:"basic",detailed:"detailed",comprehensive:"comprehensive"},defaults:{enabled:!0,level:"detailed"}},defaults:{fallback:{sourceId:"unknown",scriptId:"unknown",sourceType:"unknown",sourceVersion:"1.0.0"},messages:{loading:"Loading logs...",noLogs:"No logs available",noMatching:"No logs match your current filters",disconnected:"Not connected to server",connectionFailed:"Connection failed"}},export:{formats:["csv","json"],filenamePrefixes:{logs:"allog-logs",stats:"allog-stats",config:"allog-config"}}};var m=class{constructor(){this.config=x}get viewerPort(){return this.config.network.ports.viewer}get serverPort(){return this.config.network.ports.server}get defaultServerUrl(){return this.config.network.urls.defaultServer}get alternativeServerUrl(){return this.config.network.urls.alternativeServer}get productionServerUrl(){return this.config.network.urls.productionServer}get connectionTimeout(){return this.config.network.connection.timeout}get connectionRetries(){return this.config.network.connection.retries}get minTimeout(){return this.config.network.connection.minTimeout}get maxTimeout(){return this.config.network.connection.maxTimeout}get defaultRefreshInterval(){return this.config.refresh.intervals.default}get minRefreshInterval(){return this.config.refresh.intervals.minimum}get refreshOptions(){return this.config.refresh.intervals.options}get autoRefreshEnabled(){return this.config.refresh.autoRefresh.enabled}get minAutoRefreshInterval(){return this.config.refresh.autoRefresh.minInterval}get validLogLevels(){return this.config.logging.levels.valid}get defaultLogLevel(){return this.config.logging.levels.default}get logLevelColors(){return this.config.logging.levels.colors}get maxInternalLogs(){return this.config.logging.internal.maxLogs}get enableConsoleLogging(){return this.config.logging.internal.enableConsole}get defaultInternalLogLevel(){return this.config.logging.internal.defaultLevel}get statusColors(){return this.config.ui.colors.status}get scriptColors(){return this.config.ui.colors.script}get imagePreviewConfig(){return this.config.ui.layout.imagePreview}get notificationConfig(){return this.config.ui.layout.notification}get defaultLogBuffer(){return this.config.buffers.logs.default}get maxLogBuffer(){return this.config.buffers.logs.maximum}get instrumentationLevels(){return this.config.instrumentation.levels}get defaultInstrumentationEnabled(){return this.config.instrumentation.defaults.enabled}get defaultInstrumentationLevel(){return this.config.instrumentation.defaults.level}get fallbackValues(){return this.config.defaults.fallback}get defaultMessages(){return this.config.defaults.messages}get exportFormats(){return this.config.export.formats}get exportFilenamePrefixes(){return this.config.export.filenamePrefixes}isValidLogLevel(e){return this.validLogLevels.includes(e)}getLogLevelColor(e){return this.logLevelColors[e]||this.statusColors.neutral}getScriptColor(e){let i=this.scriptColors,t=(e||this.fallbackValues.scriptId).split("").reduce((n,c)=>(n=(n<<5)-n+c.charCodeAt(0),n&n),0);return i[Math.abs(t)%i.length]}getStatusColor(e){return this.statusColors[e]||this.statusColors.neutral}getConnectionConfig(){return{baseUrl:this.defaultServerUrl,timeout:this.connectionTimeout,retries:this.connectionRetries}}getWebSocketUrl(e){let i=window.location.protocol==="https:"?"wss":"ws",a=window.location.hostname,t=e||window.location.port,n=t===this.viewerPort.toString()?this.serverPort.toString():t||this.serverPort.toString();return`${i}://${a}:${n}`}getApiServerUrl(){let e=window.location.hostname,a=window.location.port===this.serverPort.toString()?this.viewerPort.toString():this.serverPort.toString();return`http://${e}:${a}`}formatMessage(e,i={}){return(this.defaultMessages[e]||e).replace(/\{(\w+)\}/g,(t,n)=>i[n]||t)}getServerUrl(){return window.ALLOG_INTERMEDIARY_URL||this.defaultServerUrl}getInitialLogStats(){return{totalLogs:0,bufferSize:this.defaultLogBuffer,enabledModules:this.config.buffers.stats.enabledModules,totalModules:this.config.buffers.stats.totalModules,logLevels:this.validLogLevels.reduce((e,i)=>(e[i]=0,e),{}),lastUpdate:new Date().toISOString()}}getInitialConnectionStatus(){return{isConnected:!1,retryCount:0}}getInitialMonitoringStats(){return{totalModules:0,totalScripts:0,totalVariables:0,totalStates:0,totalFunctions:0,totalProperties:0,totalEvents:0,lastUpdate:new Date().toISOString()}}},y=new m,o=y;import{jsx as r,jsxs as l}from"react/jsx-runtime";var H=({onConfigChange:p,currentClient:e})=>{let[i,a]=g(!1),[t,n]=g(()=>({baseUrl:o.getServerUrl(),timeout:o.connectionTimeout,retries:o.connectionRetries})),[c,b]=g(!1),[d,f]=g("disconnected"),[h,u]=g("");U(()=>{v()},[t.baseUrl]);let v=async()=>{b(!0),u("");try{await C(t.baseUrl).healthCheck()?(f("connected"),u("")):(f("error"),u("Server responded but health check failed"))}catch(s){f("error"),u(s instanceof Error?s.message:"Connection failed")}finally{b(!1)}},w=()=>{let s=C(t.baseUrl);p(s),a(!1)},S=()=>{n(e.getConfig())},k=()=>{switch(d){case"connected":return o.getStatusColor("connected");case"error":return o.getStatusColor("error");default:return o.getStatusColor("neutral")}},L=()=>{switch(d){case"connected":return"Connected";case"error":return"Connection Error";default:return"Disconnected"}};return l("div",{className:"connection-config",children:[l("button",{className:"config-toggle",onClick:()=>a(!i),children:[r("span",{className:"status-indicator",style:{backgroundColor:k()}}),L(),c&&r("span",{className:"connecting-spinner",children:"\u27F3"})]}),i&&l("div",{className:"config-panel",children:[r("h3",{children:"Allog System Connection"}),l("div",{className:"config-field",children:[r("label",{htmlFor:"baseUrl",children:"Server URL:"}),r("input",{id:"baseUrl",type:"url",value:t.baseUrl,onChange:s=>n({...t,baseUrl:s.target.value}),placeholder:o.defaultServerUrl})]}),l("div",{className:"config-field",children:[r("label",{htmlFor:"timeout",children:"Timeout (ms):"}),r("input",{id:"timeout",type:"number",value:t.timeout,onChange:s=>n({...t,timeout:parseInt(s.target.value)||o.connectionTimeout}),min:o.minTimeout,max:o.maxTimeout})]}),l("div",{className:"config-field",children:[r("label",{htmlFor:"retries",children:"Retries:"}),r("input",{id:"retries",type:"number",value:t.retries,onChange:s=>n({...t,retries:parseInt(s.target.value)||o.connectionRetries}),min:"0",max:"10"})]}),h&&r("div",{className:"error-message",children:h}),l("div",{className:"config-actions",children:[r("button",{className:"test-connection",onClick:v,disabled:c,children:c?"Testing...":"Test Connection"}),r("button",{className:"save-config",onClick:w,disabled:d==="error",children:"Save & Connect"}),r("button",{className:"reset-config",onClick:S,children:"Reset"})]}),l("div",{className:"preset-configs",children:[r("h4",{children:"Quick Presets:"}),r("button",{onClick:()=>n({...t,baseUrl:o.defaultServerUrl}),children:"Local Development"}),r("button",{onClick:()=>n({...t,baseUrl:o.alternativeServerUrl}),children:"Alternative Port"}),r("button",{onClick:()=>n({...t,baseUrl:o.productionServerUrl}),children:"Production API"})]})]})]})};export{H as ConnectionConfig};
